# -*- coding: utf-8 -*-
"""Lecture15_2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ai7IVQf137ADJkvKRbCddUZEjzQxjNG-

# **First we build a standard convolutional autoencoder to reconstruct MNIST digit**
 * ## **We want to have a 2D embedding**

* ## As done so far, we normalize all pixel values between 0 and 1 .
* ## We configure our encoder to have 3 convolutional layers, followed by flattening and two dense layers
"""

#!pip install --upgrade keras # necessary to import ops

import tensorflow as tf
import keras
from keras import ops # provides compatibility across multiple backends

from keras.datasets import mnist
import tensorflow.keras as K
from tensorflow.keras import layers
import numpy as np
(x_train, y_train), (x_test, _) = mnist.load_data()
x_train = np.expand_dims(x_train, -1).astype("float32") / 255
x_test = np.expand_dims(x_test, -1).astype("float32") / 255

print(x_train.shape)
print(x_test.shape)

"""--------------------------------------------"""

# one Fully-Connected layer encoder
# latent_dim: This is the size of our encoded representations
def conv_enc(INPUT_SHAPE, latent_dim):
    model = K.Sequential([
#      input_img = layers.Input(shape=INPUT_SHAPE)
      layers.Conv2D(16, (3, 3), strides = 1,
                    input_shape=INPUT_SHAPE,
                    activation='relu', padding='same'),
      layers.MaxPooling2D((2, 2), padding='same'),
      layers.Conv2D(32, (3, 3),  strides = 1,
                    activation='relu', padding='same'),
      layers.MaxPooling2D((2, 2), padding='same'),
      # at this point the representation is (7, 7, 32)
      layers.Flatten(),
      layers.Dense(16, activation="relu"),
      layers.Dense(latent_dim, activation="relu",
                   name="latent")
      ])
    return model

# at this point the representation is 32-dimensional
def conv_dec(latent_dim, out_activation='sigmoid'):
  model = K.Sequential([
    layers.Dense(16, activation="relu", input_shape=(latent_dim,)),
    layers.Dense(7*7*32, activation="relu"),
    layers.Reshape((7, 7, 32)),
    layers.Conv2DTranspose(32, (3, 3), strides = 2,
                  activation='relu', padding='same'),
    layers.Conv2DTranspose(16, (3, 3), strides = 2,
                  activation='relu', padding='same'),
    layers.Conv2D(1, (3, 3), activation=out_activation,
                  padding='same')
  ])
  return model


class Conv_AE(K.Model):
  def __init__(self, INPUT_SHAPE, ENCODING_DIM,
               enc_model, dec_model, out_activation='sigmoid'):
    super(Conv_AE, self).__init__()
    #############################################
    #----------ENCODER--------------------------#
    # at this point the representation is (28,28,1)-dimensional
    self.encoder = enc_model(INPUT_SHAPE, ENCODING_DIM)
    # at this point the representation is ENCODING_DIM-dimensional
    #############################################
    #----------DECODER--------------------------#
    self.decoder = dec_model(ENCODING_DIM, out_activation)

# method to encode images
  def getEncodedImage(self, image):
        encoded_image = self.encoder.predict(image)
        return encoded_image
# method to decode images
  def getDecodedImage(self, encoded_imgs):
      decoded_image = self.decoder.predict(encoded_imgs)
      return decoded_image

  def call(self, input):
    out_encoder = self.encoder(input)
    out_decoder = self.decoder(out_encoder)
    return out_decoder

input_shape = tuple(x_train.shape[1:])

ENCODING_DIM = 2

autoenc_conv = Conv_AE(input_shape,
                    ENCODING_DIM,
                    conv_enc,
                    conv_dec,
                    out_activation='sigmoid')

autoenc_conv.encoder.summary()

autoenc_conv.decoder.summary()

lr = 0.0001 # default value for Adam
autoenc_conv.compile(optimizer=K.optimizers.Adam(learning_rate=lr),
                  #loss='binary_crossentropy')
                  loss='mse')
epochs = 30
batch_size=128
autoenc_conv.fit(x_train, x_train,
                epochs=epochs,
                batch_size=batch_size,
                shuffle=True,
                 verbose = 2)

"""# **Display some reconstructed images**"""

import matplotlib.pyplot as plt

def plot_imgs(original, decoded_imgs, n=10):
  # n  How many digits we will display
  plt.figure(figsize=(20, 4))
  for i in range(n):
      # Display original
      ax = plt.subplot(2, n, i + 1)
      plt.imshow(original[i].reshape(28, 28))
      plt.gray()
      ax.get_xaxis().set_visible(False)
      ax.get_yaxis().set_visible(False)

      # Display reconstruction
      ax = plt.subplot(2, n, i + 1 + n)
      plt.imshow(decoded_imgs[i].reshape(28, 28))
      plt.gray()
      ax.get_xaxis().set_visible(False)
      ax.get_yaxis().set_visible(False)
  plt.show()

encoded_imgs = autoenc_conv.getEncodedImage(x_test)
decoded_imgs = autoenc_conv.getDecodedImage(encoded_imgs)

plot_imgs(x_test, decoded_imgs, n=10)

"""# As expected, the reconstruction results are not so good, since we used only two dimensions for the embedding!

# **Display a grid of sampled digits**
* ## We Take the model as input, the number of samples to generate along the two latent dimensions, and the figure size to be cropped
"""

def plot_latent_space(vae, n=30, figsize=15, digit_size=28):
    # display a n*n 2D manifold of digits
    scale = 10.0
    figure = np.zeros((digit_size * n, digit_size * n))
    # linearly spaced coordinates corresponding to the 2D plot
    # of digit classes in the latent space
    grid_x = np.linspace(-scale, scale, n)
    grid_y = np.linspace(-scale, scale, n)[::-1]

    for i, yi in enumerate(grid_y):
        for j, xi in enumerate(grid_x):
            z_sample = np.array([[xi, yi]])
            x_decoded = vae.decoder.predict(z_sample, verbose=0)
            digit = x_decoded[0].reshape(digit_size, digit_size)
            figure[
                i * digit_size : (i + 1) * digit_size,
                j * digit_size : (j + 1) * digit_size,
            ] = digit

    plt.figure(figsize=(figsize, figsize))
    start_range = digit_size // 2
    end_range = n * digit_size + start_range
    pixel_range = np.arange(start_range, end_range, digit_size)
    sample_range_x = np.round(grid_x, 1)
    sample_range_y = np.round(grid_y, 1)
    plt.xticks(pixel_range, sample_range_x)
    plt.yticks(pixel_range, sample_range_y)
    plt.xlabel("z[0]")
    plt.ylabel("z[1]")
    plt.imshow(figure, cmap="Greys_r")
    plt.show()

plot_latent_space(autoenc_conv)

"""# **As we see, intermediate values do not correspond to any 'feasible' digit**
# Let's now implement a Variational Autoencoder!

## **Defining the sampling layer**


# **Remind we need two dense layers to fit the formula**
* ## $q_\phi(Zâˆ£X):=N({dense{^1}}_\phi(X),exp({dense^2}_\phi(X))I)$
> * ## $dense^1$ and $dense^2$ are two Dense layers learning respectively the **mean** and **the logarithm of the variance** of the multivariate normal distribution to sample $Z$ from   
* ## We define a custom layer inherediting the `keras.layers.Layer` class
* ## It will output the $Z$ value corresponding to input values
"""

class Sampling(layers.Layer):
    """Uses (z_mean, z_log_var) to sample z, the vector encoding a digit."""

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.seed_generator = K.random.SeedGenerator(1337)

    def call(self, inputs):
        z_mean, z_log_var = inputs
        batch = ops.shape(z_mean)[0]
        dim = ops.shape(z_mean)[1]
        epsilon = K.random.normal(shape=(batch, dim), seed=self.seed_generator,
                                  mean=0, stddev=1,)
        return z_mean + ops.exp(0.5 * z_log_var) * epsilon

"""# **Building the encoder**
* ## It has two 'parallel' dense layers at the end, one for $\mu$ values, one for the $\sigma$ values, or their logarithm
* ## And a final Sampling layer to output the $Z$ value
* ## It outputs the corresponding $\mu$, $\sigma$ and $Z$ value
"""

# one Fully-Connected layer encoder
# ENCODING_DIM: This is the size of our encoded representations
def vae_enc(INPUT_SHAPE, latent_dim):
    enc_inputs = K.Input(shape=INPUT_SHAPE)
    tmp = layers.Conv2D(16, (3, 3), strides = 1,
                    activation='relu', padding='same')(enc_inputs)
    tmp = layers.MaxPooling2D((2, 2), padding='same')(tmp)
    tmp = layers.Conv2D(32, (3, 3),  strides = 1,
                    activation='relu', padding='same')(tmp)
    tmp = layers.MaxPooling2D((2, 2), padding='same')(tmp)
      # at this point the representation is (7, 7, 32)
    tmp = layers.Flatten()(tmp)
    tmp = layers.Dense(16, activation="relu")(tmp)
    z_mean = layers.Dense(latent_dim, activation="elu",
                   name="z_mean")(tmp)
    z_log_var = layers.Dense(latent_dim, activation="elu",
                   name="z_log_var")(tmp)
    z = Sampling()([z_mean, z_log_var])
    model = K.Model(enc_inputs, [z_mean, z_log_var, z],
                    name='Encoder')

    return model

"""# **Building the Decoder**"""

def vae_dec(latent_dim, out_activation='sigmoid'):
    latent_inputs = K.Input(shape=(latent_dim,))
    tmp = layers.Dense(16, activation="relu")(latent_inputs)
    tmp = layers.Dense(7*7*32, activation="relu")(tmp)
    tmp = layers.Reshape((7, 7, 32))(tmp)
    tmp = layers.Conv2DTranspose(32, (3, 3), strides = 2,
                  activation='relu', padding='same')(tmp)
    tmp = layers.Conv2DTranspose(16, (3, 3), strides = 2,
                  activation='relu', padding='same')(tmp)
    decoder_outputs = layers.Conv2D(1, (3, 3),
                                    activation=out_activation,
                                    padding='same')(tmp)
    model = K.Model(latent_inputs, decoder_outputs, name='Decoder')
    return model

"""# **Building the VAE**
* ## We need to define the custom loss as mean of MSE and KL of the prior p(Z) and the posterior p(Z|X)
"""

class VAE(K.Model):
  def __init__(self, INPUT_SHAPE, ENCODING_DIM,
               enc_model, dec_model,
               out_activation='sigmoid',
               reg=1,
               **kwargs):
    super(VAE, self).__init__()
    #############################################
    #----------ENCODER--------------------------#
    # at this point the representation is (28,28,1)-dimensional
    self.latent_dim = ENCODING_DIM
    self.encoder = enc_model(INPUT_SHAPE, self.latent_dim)
    self.reg = reg

    self.out_activation = out_activation
    # at this point the representation is ENCODING_DIM-dimensional
    #############################################
    #----------DECODER--------------------------#
    self.decoder = dec_model(ENCODING_DIM, self.out_activation)
    ############################################
    # --------- LOSSES -------------------------#
    self.total_loss_tracker = K.metrics.Mean(name="total_loss")
    self.reconstruction_loss_tracker = K.metrics.Mean(
        name="reconstruction_loss"
        )
    self.kl_loss_tracker = K.metrics.Mean(name="kl_loss")

  ## Defining custom metrics as a model property
  ## so that they are added as metrics to track our the loss
  @property # property is a built-in decorator that turns a method
            #into a readable attribute without requiring parentheses when calling it.
  def metrics(self):
    return [
        self.total_loss_tracker,
        self.reconstruction_loss_tracker,
        self.kl_loss_tracker,
    ]
  ## Implementing a custom training step  that updates the state
  ##  of these metrics (by calling update_state() on them)
  @tf.function
  def train_step(self, data):
#    (x,y) = data
#    print(f"a.shspe:{x.shape}, b.shspe:{b.shape}")
    with tf.GradientTape() as tape:
        z_mean, z_log_var, z = self.encoder(data)
        reconstruction = self.decoder(z)
        reconstruction_loss = ops.mean(
            ops.sum(
                #K.losses.binary_crossentropy(data, reconstruction),
                K.losses.MSE(data, reconstruction),
                axis=(1, 2),
            )
        )
        kl_loss = -0.5 * (1 + z_log_var - ops.square(z_mean) - ops.exp(z_log_var))
        kl_loss = ops.mean(ops.sum(kl_loss, axis=1))
        total_loss = reconstruction_loss + self.reg*kl_loss
    grads = tape.gradient(total_loss, self.trainable_weights)
    self.optimizer.apply_gradients(zip(grads, self.trainable_weights))
    self.total_loss_tracker.update_state(total_loss)
    self.reconstruction_loss_tracker.update_state(reconstruction_loss)
    self.kl_loss_tracker.update_state(kl_loss)
    return {
        "loss": self.total_loss_tracker.result(),
        "reconstruction_loss": self.reconstruction_loss_tracker.result(),
        "kl_loss": self.kl_loss_tracker.result(),
    }

  # method to encode images
  def getEncodedImage(self, image):
        encoded_image = self.encoder.predict(image)
        return encoded_image
# method to decode images
  def getDecodedImage(self, encoded_imgs):
      decoded_image = self.decoder.predict(encoded_imgs)
      return decoded_image

  def call(self, input):
    _,_,out_encoder = self.encoder(input)
    out_decoder = self.decoder(out_encoder)
    return out_decoder

"""# **Training the VAE**"""

input_shape = tuple(x_train.shape[1:])
ENCODING_DIM = 2

vae = VAE(input_shape,
          ENCODING_DIM,
          vae_enc,
          vae_dec,
          out_activation='sigmoid',
          reg=1)
print(vae.encoder.summary())
print(vae.decoder.summary())

from tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping
lr = 0.0001 # default value for Adam
vae.compile(optimizer=K.optimizers.Adam(learning_rate=lr))
#lr_scheduler = ReduceLROnPlateau(monitor='loss', factor=0.9,
#												threshold=0.0,
#												min_delta=0,
#	                                 patience=2,
#	                                 cooldown=0,
#	                                 verbose=1,
#	                                 min_lr = 10**-5)
#early_stopping = EarlyStopping(monitor='reconstruction_loss', mode='min', patience=15, verbose=0)
#callbacks_list = [lr_scheduler, early_stopping]
epochs = 50
batch_size=64
vae.fit(#mnist_digits, mnist_digits,
        x_train,
        epochs=epochs,
        batch_size=batch_size,
        shuffle=True,
        #callbacks=callbacks_list,
        verbose = 2)

"""# **Let's reconstruct some testing images**"""

z_mean, z_log_var, encoded_imgs = vae.getEncodedImage(x_test)
decoded_imgs = vae.getDecodedImage(encoded_imgs)

plot_imgs(x_test, decoded_imgs, n=10)

"""# Again, as expected, the reconstruction is not good, since we used only two latent features
* ## I was visible already in the loss values, which only slightly decreased
* ## But we now plot the latent space in a gradual way, like done before
"""

plot_latent_space(vae)

"""# Now moving from a region to another one is through intermediate digits!

# **Exercise**
## In the  ``total_loss`` computation (line 56 of the corresponding cell), try tests with reg >1 and reg<1, to check how the embedding varies (various classes should gather closer when reg>1)
## Evaluate how the digits distribute in the Z space when varying *reg*

# **Display how the latent space clusters different digit classes**
"""

def plot_label_clusters(vae, data, labels):
    # display a 2D plot of the digit classes in the latent space
    z_mean, _, _ = vae.encoder.predict(data, verbose=0)
    print(f"z_mean.shape:{z_mean.shape}")
    plt.figure(figsize=(12, 10))
    plt.scatter(z_mean[:, 0], z_mean[:, 1], c=labels)
    plt.colorbar()
    plt.xlabel("z[0]")
    plt.ylabel("z[1]")
    plt.show()

plot_label_clusters(vae, x_train, y_train)

"""# **Exercise**
* ## Using the image dataset of laboratory 12, implement a variational autoencoder, even with more that 2 latent embeddings
* ## Then explore the latent space by randomly sample z values and feeding it to the decoder
* ## Verify if the reconstructed images make sense with regard to the original images

# **Hopfield Networks**
* ## Let's try to implement from scratch a simply Hopfield net class
* ## We define a custom signum function for the neuron activation
"""

import numpy as np
import math

def my_sign(x):
  return int(math.copysign(1, x))

print(my_sign(0.0001))
print(my_sign(-0.0001))
print(my_sign(0))

class HopfieldNetwork:
    def __init__(self, size, max_epochs):
        self.size = size # number of neurons
        #initilizing weights
        self.weights = np.zeros((size, size))
        self.max_epochs = max_epochs

    def train(self, data):
        for pattern in data:
            self.weights += np.outer(pattern, pattern)
        self.weights /= len(data)
        ## No self loops in hopfield networks
        np.fill_diagonal(self.weights, 0)

    def predict(self, pattern):
        result = np.copy(pattern)

        for _ in range(self.max_epochs):  # number of iterations
            change = 0 # flag to get equilibrium state reached
            for i in range(self.size):
                # asynchronous update rule: weighted sum of the inputs
                if my_sign(np.dot(self.weights[i], result)) != result[i]:
                  result[i] = -result[i]
                  change=1

            if not change: # equilibrium state
              break
        return result

"""# **Setting the configuration**

"""

pattern_size = 20
num_patterns = 3
noise_level = 0.2

"""# **Generating the patterns to be stored**
* ## For good results, patterns should be `far' enough

"""

# define our patterns
patterns = np.array([
   [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1,-1, -1, -1, -1, -1],
   [-1, -1, -1, -1, -1,-1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
   [1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1],
])
#patterns = generate_pattern(pattern_size, num_patterns)
print(patterns)
print(patterns.shape)

"""# **Creating the Hopfield network and training it**"""

hopfield_net = HopfieldNetwork(pattern_size, max_epochs=20)
hopfield_net.train(patterns)

print(hopfield_net.weights)

"""# **Function to add noise**
* ## flip around ``noise_level`` \% of the bits in ``pattern`` uniformly at random
"""

def add_noise(pattern, noise_level):
    noise = np.random.choice([1, -1], pattern.shape, p=[1-noise_level, noise_level])
    return pattern * noise

"""# **Function to compute accuracy of reconstruction**"""

# accuracy of reconstructed inputs
def recon_accuracy(recon, true):
  return np.sum(recon== true)/len(recon)

"""# **Testing it**"""

num_test = num_patterns
test_pattern = add_noise(patterns[:num_test], noise_level)
for i in range(num_test):
  recovered_pattern = hopfield_net.predict(test_pattern[i])
  print("\tOriginal pattern:  ", patterns[i])
  print("\tNoisy pattern:     ", test_pattern[i])
  print("\tRecovered pattern: ", recovered_pattern)
  print(f"\t pattern:{i}, original % of difference:{1-recon_accuracy(patterns[i], test_pattern[i])}")
  print(f"\t pattern:{i}, recon accuracy:{recon_accuracy(patterns[i], recovered_pattern)}")
  print("----------------------------------")

"""# **The reconstruction is perfect!**
# **Let's try with random patterns**

# **Function to generate random patterns in $\{-1,1\}^n$**
"""

def generate_random_pattern(size, num_patterns):
    return np.random.choice([-1, 1], (num_patterns, size))

patterns = generate_random_pattern(pattern_size, num_patterns)
print(patterns)
print(patterns.shape)

hopfield_net = HopfieldNetwork(pattern_size, max_epochs=20)
hopfield_net.train(patterns)
num_test = num_patterns
test_pattern = add_noise(patterns[:num_test], noise_level)
for i in range(num_test):
  recovered_pattern = hopfield_net.predict(test_pattern[i])
  print("\tOriginal pattern:  ", patterns[i])
  print("\tNoisy pattern:     ", test_pattern[i])
  print("\tRecovered pattern: ", recovered_pattern)
  print(f"\t pattern:{i}, original % of difference:{1-recon_accuracy(patterns[i], test_pattern[i])}")
  print(f"\t pattern:{i}, recon accuracy:{recon_accuracy(patterns[i], recovered_pattern)}")
  print("----------------------------------")

"""# With randomly generated patterns, the network is attacted by other attactors (minima), and do not reconstruct perfectly in some cases
* ## but however can reduce the initial gap
"""